(* File auto-generated by obus-gen-interface, DO NOT EDIT. *)
open OBus_value
open OBus_value.C
open OBus_member
open OBus_object
module Org_freedesktop_NetworkManager =
struct
  let interface = "org.freedesktop.NetworkManager"
  let m_ActivateConnection = {
    Method.interface = interface;
    Method.member = "ActivateConnection";
    Method.i_args = (arg3
                       (Some "connection", basic_object_path)
                       (Some "device", basic_object_path)
                       (Some "specific_object", basic_object_path));
    Method.o_args = (arg1
                       (Some "active_connection", basic_object_path));
    Method.annotations = [];
  }
  let m_AddAndActivateConnection = {
    Method.interface = interface;
    Method.member = "AddAndActivateConnection";
    Method.i_args = (arg3
                       (Some "connection", dict string (dict string variant))
                       (Some "device", basic_object_path)
                       (Some "specific_object", basic_object_path));
    Method.o_args = (arg2
                       (Some "path", basic_object_path)
                       (Some "active_connection", basic_object_path));
    Method.annotations = [];
  }
  let m_AddAndActivateConnection2 = {
    Method.interface = interface;
    Method.member = "AddAndActivateConnection2";
    Method.i_args = (arg4
                       (Some "connection", dict string (dict string variant))
                       (Some "device", basic_object_path)
                       (Some "specific_object", basic_object_path)
                       (Some "options", dict string variant));
    Method.o_args = (arg3
                       (Some "path", basic_object_path)
                       (Some "active_connection", basic_object_path)
                       (Some "result", dict string variant));
    Method.annotations = [];
  }
  let m_CheckConnectivity = {
    Method.interface = interface;
    Method.member = "CheckConnectivity";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "connectivity", basic_uint32));
    Method.annotations = [];
  }
  let m_CheckpointAdjustRollbackTimeout = {
    Method.interface = interface;
    Method.member = "CheckpointAdjustRollbackTimeout";
    Method.i_args = (arg2
                       (Some "checkpoint", basic_object_path)
                       (Some "add_timeout", basic_uint32));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_CheckpointCreate = {
    Method.interface = interface;
    Method.member = "CheckpointCreate";
    Method.i_args = (arg3
                       (Some "devices", array basic_object_path)
                       (Some "rollback_timeout", basic_uint32)
                       (Some "flags", basic_uint32));
    Method.o_args = (arg1
                       (Some "checkpoint", basic_object_path));
    Method.annotations = [];
  }
  let m_CheckpointDestroy = {
    Method.interface = interface;
    Method.member = "CheckpointDestroy";
    Method.i_args = (arg1
                       (Some "checkpoint", basic_object_path));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_CheckpointRollback = {
    Method.interface = interface;
    Method.member = "CheckpointRollback";
    Method.i_args = (arg1
                       (Some "checkpoint", basic_object_path));
    Method.o_args = (arg1
                       (Some "result", dict string basic_uint32));
    Method.annotations = [];
  }
  let m_DeactivateConnection = {
    Method.interface = interface;
    Method.member = "DeactivateConnection";
    Method.i_args = (arg1
                       (Some "active_connection", basic_object_path));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_Enable = {
    Method.interface = interface;
    Method.member = "Enable";
    Method.i_args = (arg1
                       (Some "enable", basic_boolean));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_GetAllDevices = {
    Method.interface = interface;
    Method.member = "GetAllDevices";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "devices", array basic_object_path));
    Method.annotations = [];
  }
  let m_GetDeviceByIpIface = {
    Method.interface = interface;
    Method.member = "GetDeviceByIpIface";
    Method.i_args = (arg1
                       (Some "iface", basic_string));
    Method.o_args = (arg1
                       (Some "device", basic_object_path));
    Method.annotations = [];
  }
  let m_GetDevices = {
    Method.interface = interface;
    Method.member = "GetDevices";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "devices", array basic_object_path));
    Method.annotations = [];
  }
  let m_GetLogging = {
    Method.interface = interface;
    Method.member = "GetLogging";
    Method.i_args = (arg0);
    Method.o_args = (arg2
                       (Some "level", basic_string)
                       (Some "domains", basic_string));
    Method.annotations = [];
  }
  let m_GetPermissions = {
    Method.interface = interface;
    Method.member = "GetPermissions";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "permissions", dict string basic_string));
    Method.annotations = [];
  }
  let m_Reload = {
    Method.interface = interface;
    Method.member = "Reload";
    Method.i_args = (arg1
                       (Some "flags", basic_uint32));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_SetLogging = {
    Method.interface = interface;
    Method.member = "SetLogging";
    Method.i_args = (arg2
                       (Some "level", basic_string)
                       (Some "domains", basic_string));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_Sleep = {
    Method.interface = interface;
    Method.member = "Sleep";
    Method.i_args = (arg1
                       (Some "sleep", basic_boolean));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_state = {
    Method.interface = interface;
    Method.member = "state";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "state", basic_uint32));
    Method.annotations = [];
  }
  let s_CheckPermissions = {
    Signal.interface = interface;
    Signal.member = "CheckPermissions";
    Signal.args = (arg0);
    Signal.annotations = [];
  }
  let s_DeviceAdded = {
    Signal.interface = interface;
    Signal.member = "DeviceAdded";
    Signal.args = (arg1
                       (Some "device_path", basic_object_path));
    Signal.annotations = [];
  }
  let s_DeviceRemoved = {
    Signal.interface = interface;
    Signal.member = "DeviceRemoved";
    Signal.args = (arg1
                       (Some "device_path", basic_object_path));
    Signal.annotations = [];
  }
  let s_PropertiesChanged = {
    Signal.interface = interface;
    Signal.member = "PropertiesChanged";
    Signal.args = (arg1
                       (Some "properties", dict string variant));
    Signal.annotations = [];
  }
  let s_StateChanged = {
    Signal.interface = interface;
    Signal.member = "StateChanged";
    Signal.args = (arg1
                       (Some "state", basic_uint32));
    Signal.annotations = [];
  }
  let p_ActivatingConnection = {
    Property.interface = interface;
    Property.member = "ActivatingConnection";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_ActiveConnections = {
    Property.interface = interface;
    Property.member = "ActiveConnections";
    Property.typ = array basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_AllDevices = {
    Property.interface = interface;
    Property.member = "AllDevices";
    Property.typ = array basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Capabilities = {
    Property.interface = interface;
    Property.member = "Capabilities";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Checkpoints = {
    Property.interface = interface;
    Property.member = "Checkpoints";
    Property.typ = array basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Connectivity = {
    Property.interface = interface;
    Property.member = "Connectivity";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_ConnectivityCheckAvailable = {
    Property.interface = interface;
    Property.member = "ConnectivityCheckAvailable";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_ConnectivityCheckEnabled = {
    Property.interface = interface;
    Property.member = "ConnectivityCheckEnabled";
    Property.typ = basic_boolean;
    Property.access = Property.readable_writable;
    Property.annotations = [];
  }
  let p_ConnectivityCheckUri = {
    Property.interface = interface;
    Property.member = "ConnectivityCheckUri";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Devices = {
    Property.interface = interface;
    Property.member = "Devices";
    Property.typ = array basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_GlobalDnsConfiguration = {
    Property.interface = interface;
    Property.member = "GlobalDnsConfiguration";
    Property.typ = dict string variant;
    Property.access = Property.readable_writable;
    Property.annotations = [];
  }
  let p_Metered = {
    Property.interface = interface;
    Property.member = "Metered";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_NetworkingEnabled = {
    Property.interface = interface;
    Property.member = "NetworkingEnabled";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_PrimaryConnection = {
    Property.interface = interface;
    Property.member = "PrimaryConnection";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_PrimaryConnectionType = {
    Property.interface = interface;
    Property.member = "PrimaryConnectionType";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Startup = {
    Property.interface = interface;
    Property.member = "Startup";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_State = {
    Property.interface = interface;
    Property.member = "State";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Version = {
    Property.interface = interface;
    Property.member = "Version";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_WimaxEnabled = {
    Property.interface = interface;
    Property.member = "WimaxEnabled";
    Property.typ = basic_boolean;
    Property.access = Property.readable_writable;
    Property.annotations = [];
  }
  let p_WimaxHardwareEnabled = {
    Property.interface = interface;
    Property.member = "WimaxHardwareEnabled";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_WirelessEnabled = {
    Property.interface = interface;
    Property.member = "WirelessEnabled";
    Property.typ = basic_boolean;
    Property.access = Property.readable_writable;
    Property.annotations = [];
  }
  let p_WirelessHardwareEnabled = {
    Property.interface = interface;
    Property.member = "WirelessHardwareEnabled";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_WwanEnabled = {
    Property.interface = interface;
    Property.member = "WwanEnabled";
    Property.typ = basic_boolean;
    Property.access = Property.readable_writable;
    Property.annotations = [];
  }
  let p_WwanHardwareEnabled = {
    Property.interface = interface;
    Property.member = "WwanHardwareEnabled";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  type 'a members = {
    m_ActivateConnection : 'a OBus_object.t -> OBus_path.t * OBus_path.t * OBus_path.t -> OBus_path.t Lwt.t;
    m_AddAndActivateConnection : 'a OBus_object.t -> (string * (string * OBus_value.V.single) list) list * OBus_path.t * OBus_path.t -> (OBus_path.t * OBus_path.t) Lwt.t;
    m_AddAndActivateConnection2 : 'a OBus_object.t -> (string * (string * OBus_value.V.single) list) list * OBus_path.t * OBus_path.t * (string * OBus_value.V.single) list -> (OBus_path.t * OBus_path.t * (string * OBus_value.V.single) list) Lwt.t;
    m_CheckConnectivity : 'a OBus_object.t -> unit -> int32 Lwt.t;
    m_CheckpointAdjustRollbackTimeout : 'a OBus_object.t -> OBus_path.t * int32 -> unit Lwt.t;
    m_CheckpointCreate : 'a OBus_object.t -> OBus_path.t list * int32 * int32 -> OBus_path.t Lwt.t;
    m_CheckpointDestroy : 'a OBus_object.t -> OBus_path.t -> unit Lwt.t;
    m_CheckpointRollback : 'a OBus_object.t -> OBus_path.t -> (string * int32) list Lwt.t;
    m_DeactivateConnection : 'a OBus_object.t -> OBus_path.t -> unit Lwt.t;
    m_Enable : 'a OBus_object.t -> bool -> unit Lwt.t;
    m_GetAllDevices : 'a OBus_object.t -> unit -> OBus_path.t list Lwt.t;
    m_GetDeviceByIpIface : 'a OBus_object.t -> string -> OBus_path.t Lwt.t;
    m_GetDevices : 'a OBus_object.t -> unit -> OBus_path.t list Lwt.t;
    m_GetLogging : 'a OBus_object.t -> unit -> (string * string) Lwt.t;
    m_GetPermissions : 'a OBus_object.t -> unit -> (string * string) list Lwt.t;
    m_Reload : 'a OBus_object.t -> int32 -> unit Lwt.t;
    m_SetLogging : 'a OBus_object.t -> string * string -> unit Lwt.t;
    m_Sleep : 'a OBus_object.t -> bool -> unit Lwt.t;
    m_state : 'a OBus_object.t -> unit -> int32 Lwt.t;
    p_ActivatingConnection : 'a OBus_object.t -> OBus_path.t React.signal;
    p_ActiveConnections : 'a OBus_object.t -> OBus_path.t list React.signal;
    p_AllDevices : 'a OBus_object.t -> OBus_path.t list React.signal;
    p_Capabilities : 'a OBus_object.t -> int32 React.signal;
    p_Checkpoints : 'a OBus_object.t -> OBus_path.t list React.signal;
    p_Connectivity : 'a OBus_object.t -> int32 React.signal;
    p_ConnectivityCheckAvailable : 'a OBus_object.t -> bool React.signal;
    p_ConnectivityCheckEnabled : ('a OBus_object.t -> bool React.signal) * ('a OBus_object.t -> bool -> unit Lwt.t);
    p_ConnectivityCheckUri : 'a OBus_object.t -> string React.signal;
    p_Devices : 'a OBus_object.t -> OBus_path.t list React.signal;
    p_GlobalDnsConfiguration : ('a OBus_object.t -> (string * OBus_value.V.single) list React.signal) * ('a OBus_object.t -> (string * OBus_value.V.single) list -> unit Lwt.t);
    p_Metered : 'a OBus_object.t -> int32 React.signal;
    p_NetworkingEnabled : 'a OBus_object.t -> bool React.signal;
    p_PrimaryConnection : 'a OBus_object.t -> OBus_path.t React.signal;
    p_PrimaryConnectionType : 'a OBus_object.t -> string React.signal;
    p_Startup : 'a OBus_object.t -> bool React.signal;
    p_State : 'a OBus_object.t -> int32 React.signal;
    p_Version : 'a OBus_object.t -> string React.signal;
    p_WimaxEnabled : ('a OBus_object.t -> bool React.signal) * ('a OBus_object.t -> bool -> unit Lwt.t);
    p_WimaxHardwareEnabled : 'a OBus_object.t -> bool React.signal;
    p_WirelessEnabled : ('a OBus_object.t -> bool React.signal) * ('a OBus_object.t -> bool -> unit Lwt.t);
    p_WirelessHardwareEnabled : 'a OBus_object.t -> bool React.signal;
    p_WwanEnabled : ('a OBus_object.t -> bool React.signal) * ('a OBus_object.t -> bool -> unit Lwt.t);
    p_WwanHardwareEnabled : 'a OBus_object.t -> bool React.signal;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
        method_info m_ActivateConnection members.m_ActivateConnection;
        method_info m_AddAndActivateConnection members.m_AddAndActivateConnection;
        method_info m_AddAndActivateConnection2 members.m_AddAndActivateConnection2;
        method_info m_CheckConnectivity members.m_CheckConnectivity;
        method_info m_CheckpointAdjustRollbackTimeout members.m_CheckpointAdjustRollbackTimeout;
        method_info m_CheckpointCreate members.m_CheckpointCreate;
        method_info m_CheckpointDestroy members.m_CheckpointDestroy;
        method_info m_CheckpointRollback members.m_CheckpointRollback;
        method_info m_DeactivateConnection members.m_DeactivateConnection;
        method_info m_Enable members.m_Enable;
        method_info m_GetAllDevices members.m_GetAllDevices;
        method_info m_GetDeviceByIpIface members.m_GetDeviceByIpIface;
        method_info m_GetDevices members.m_GetDevices;
        method_info m_GetLogging members.m_GetLogging;
        method_info m_GetPermissions members.m_GetPermissions;
        method_info m_Reload members.m_Reload;
        method_info m_SetLogging members.m_SetLogging;
        method_info m_Sleep members.m_Sleep;
        method_info m_state members.m_state;
      |]
      [|
        signal_info s_CheckPermissions;
        signal_info s_DeviceAdded;
        signal_info s_DeviceRemoved;
        signal_info s_PropertiesChanged;
        signal_info s_StateChanged;
      |]
      [|
        property_r_info p_ActivatingConnection members.p_ActivatingConnection;
        property_r_info p_ActiveConnections members.p_ActiveConnections;
        property_r_info p_AllDevices members.p_AllDevices;
        property_r_info p_Capabilities members.p_Capabilities;
        property_r_info p_Checkpoints members.p_Checkpoints;
        property_r_info p_Connectivity members.p_Connectivity;
        property_r_info p_ConnectivityCheckAvailable members.p_ConnectivityCheckAvailable;
        property_rw_info p_ConnectivityCheckEnabled (fst members.p_ConnectivityCheckEnabled) (snd members.p_ConnectivityCheckEnabled);
        property_r_info p_ConnectivityCheckUri members.p_ConnectivityCheckUri;
        property_r_info p_Devices members.p_Devices;
        property_rw_info p_GlobalDnsConfiguration (fst members.p_GlobalDnsConfiguration) (snd members.p_GlobalDnsConfiguration);
        property_r_info p_Metered members.p_Metered;
        property_r_info p_NetworkingEnabled members.p_NetworkingEnabled;
        property_r_info p_PrimaryConnection members.p_PrimaryConnection;
        property_r_info p_PrimaryConnectionType members.p_PrimaryConnectionType;
        property_r_info p_Startup members.p_Startup;
        property_r_info p_State members.p_State;
        property_r_info p_Version members.p_Version;
        property_rw_info p_WimaxEnabled (fst members.p_WimaxEnabled) (snd members.p_WimaxEnabled);
        property_r_info p_WimaxHardwareEnabled members.p_WimaxHardwareEnabled;
        property_rw_info p_WirelessEnabled (fst members.p_WirelessEnabled) (snd members.p_WirelessEnabled);
        property_r_info p_WirelessHardwareEnabled members.p_WirelessHardwareEnabled;
        property_rw_info p_WwanEnabled (fst members.p_WwanEnabled) (snd members.p_WwanEnabled);
        property_r_info p_WwanHardwareEnabled members.p_WwanHardwareEnabled;
      |]
end
module Org_freedesktop_NetworkManager_AgentManager =
struct
  let interface = "org.freedesktop.NetworkManager.AgentManager"
  let m_Register = {
    Method.interface = interface;
    Method.member = "Register";
    Method.i_args = (arg1
                       (Some "identifier", basic_string));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_RegisterWithCapabilities = {
    Method.interface = interface;
    Method.member = "RegisterWithCapabilities";
    Method.i_args = (arg2
                       (Some "identifier", basic_string)
                       (Some "capabilities", basic_uint32));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_Unregister = {
    Method.interface = interface;
    Method.member = "Unregister";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  type 'a members = {
    m_Register : 'a OBus_object.t -> string -> unit Lwt.t;
    m_RegisterWithCapabilities : 'a OBus_object.t -> string * int32 -> unit Lwt.t;
    m_Unregister : 'a OBus_object.t -> unit -> unit Lwt.t;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
        method_info m_Register members.m_Register;
        method_info m_RegisterWithCapabilities members.m_RegisterWithCapabilities;
        method_info m_Unregister members.m_Unregister;
      |]
      [|
      |]
      [|
      |]
end
module Org_freedesktop_NetworkManager_Connection_Active =
struct
  let interface = "org.freedesktop.NetworkManager.Connection.Active"
  let s_PropertiesChanged = {
    Signal.interface = interface;
    Signal.member = "PropertiesChanged";
    Signal.args = (arg1
                       (Some "properties", dict string variant));
    Signal.annotations = [];
  }
  let s_StateChanged = {
    Signal.interface = interface;
    Signal.member = "StateChanged";
    Signal.args = (arg2
                       (Some "state", basic_uint32)
                       (Some "reason", basic_uint32));
    Signal.annotations = [];
  }
  let p_Connection = {
    Property.interface = interface;
    Property.member = "Connection";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Default = {
    Property.interface = interface;
    Property.member = "Default";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Default6 = {
    Property.interface = interface;
    Property.member = "Default6";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Devices = {
    Property.interface = interface;
    Property.member = "Devices";
    Property.typ = array basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Dhcp4Config = {
    Property.interface = interface;
    Property.member = "Dhcp4Config";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Dhcp6Config = {
    Property.interface = interface;
    Property.member = "Dhcp6Config";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Id = {
    Property.interface = interface;
    Property.member = "Id";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Ip4Config = {
    Property.interface = interface;
    Property.member = "Ip4Config";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Ip6Config = {
    Property.interface = interface;
    Property.member = "Ip6Config";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Master = {
    Property.interface = interface;
    Property.member = "Master";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_SpecificObject = {
    Property.interface = interface;
    Property.member = "SpecificObject";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_State = {
    Property.interface = interface;
    Property.member = "State";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_StateFlags = {
    Property.interface = interface;
    Property.member = "StateFlags";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Type = {
    Property.interface = interface;
    Property.member = "Type";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Uuid = {
    Property.interface = interface;
    Property.member = "Uuid";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Vpn = {
    Property.interface = interface;
    Property.member = "Vpn";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  type 'a members = {
    p_Connection : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Default : 'a OBus_object.t -> bool React.signal;
    p_Default6 : 'a OBus_object.t -> bool React.signal;
    p_Devices : 'a OBus_object.t -> OBus_path.t list React.signal;
    p_Dhcp4Config : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Dhcp6Config : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Id : 'a OBus_object.t -> string React.signal;
    p_Ip4Config : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Ip6Config : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Master : 'a OBus_object.t -> OBus_path.t React.signal;
    p_SpecificObject : 'a OBus_object.t -> OBus_path.t React.signal;
    p_State : 'a OBus_object.t -> int32 React.signal;
    p_StateFlags : 'a OBus_object.t -> int32 React.signal;
    p_Type : 'a OBus_object.t -> string React.signal;
    p_Uuid : 'a OBus_object.t -> string React.signal;
    p_Vpn : 'a OBus_object.t -> bool React.signal;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
      |]
      [|
        signal_info s_PropertiesChanged;
        signal_info s_StateChanged;
      |]
      [|
        property_r_info p_Connection members.p_Connection;
        property_r_info p_Default members.p_Default;
        property_r_info p_Default6 members.p_Default6;
        property_r_info p_Devices members.p_Devices;
        property_r_info p_Dhcp4Config members.p_Dhcp4Config;
        property_r_info p_Dhcp6Config members.p_Dhcp6Config;
        property_r_info p_Id members.p_Id;
        property_r_info p_Ip4Config members.p_Ip4Config;
        property_r_info p_Ip6Config members.p_Ip6Config;
        property_r_info p_Master members.p_Master;
        property_r_info p_SpecificObject members.p_SpecificObject;
        property_r_info p_State members.p_State;
        property_r_info p_StateFlags members.p_StateFlags;
        property_r_info p_Type members.p_Type;
        property_r_info p_Uuid members.p_Uuid;
        property_r_info p_Vpn members.p_Vpn;
      |]
end
module Org_freedesktop_NetworkManager_DHCP4Config =
struct
  let interface = "org.freedesktop.NetworkManager.DHCP4Config"
  let s_PropertiesChanged = {
    Signal.interface = interface;
    Signal.member = "PropertiesChanged";
    Signal.args = (arg1
                       (Some "properties", dict string variant));
    Signal.annotations = [];
  }
  let p_Options = {
    Property.interface = interface;
    Property.member = "Options";
    Property.typ = dict string variant;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  type 'a members = {
    p_Options : 'a OBus_object.t -> (string * OBus_value.V.single) list React.signal;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
      |]
      [|
        signal_info s_PropertiesChanged;
      |]
      [|
        property_r_info p_Options members.p_Options;
      |]
end
module Org_freedesktop_NetworkManager_Device =
struct
  let interface = "org.freedesktop.NetworkManager.Device"
  let m_Delete = {
    Method.interface = interface;
    Method.member = "Delete";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_Disconnect = {
    Method.interface = interface;
    Method.member = "Disconnect";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_GetAppliedConnection = {
    Method.interface = interface;
    Method.member = "GetAppliedConnection";
    Method.i_args = (arg1
                       (Some "flags", basic_uint32));
    Method.o_args = (arg2
                       (Some "connection", dict string (dict string variant))
                       (Some "version_id", basic_uint64));
    Method.annotations = [];
  }
  let m_Reapply = {
    Method.interface = interface;
    Method.member = "Reapply";
    Method.i_args = (arg3
                       (Some "connection", dict string (dict string variant))
                       (Some "version_id", basic_uint64)
                       (Some "flags", basic_uint32));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let s_StateChanged = {
    Signal.interface = interface;
    Signal.member = "StateChanged";
    Signal.args = (arg3
                       (Some "new_state", basic_uint32)
                       (Some "old_state", basic_uint32)
                       (Some "reason", basic_uint32));
    Signal.annotations = [];
  }
  let p_ActiveConnection = {
    Property.interface = interface;
    Property.member = "ActiveConnection";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Autoconnect = {
    Property.interface = interface;
    Property.member = "Autoconnect";
    Property.typ = basic_boolean;
    Property.access = Property.readable_writable;
    Property.annotations = [];
  }
  let p_AvailableConnections = {
    Property.interface = interface;
    Property.member = "AvailableConnections";
    Property.typ = array basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Capabilities = {
    Property.interface = interface;
    Property.member = "Capabilities";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_DeviceType = {
    Property.interface = interface;
    Property.member = "DeviceType";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Dhcp4Config = {
    Property.interface = interface;
    Property.member = "Dhcp4Config";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Dhcp6Config = {
    Property.interface = interface;
    Property.member = "Dhcp6Config";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Driver = {
    Property.interface = interface;
    Property.member = "Driver";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_DriverVersion = {
    Property.interface = interface;
    Property.member = "DriverVersion";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_FirmwareMissing = {
    Property.interface = interface;
    Property.member = "FirmwareMissing";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_FirmwareVersion = {
    Property.interface = interface;
    Property.member = "FirmwareVersion";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Interface = {
    Property.interface = interface;
    Property.member = "Interface";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Ip4Address = {
    Property.interface = interface;
    Property.member = "Ip4Address";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Ip4Config = {
    Property.interface = interface;
    Property.member = "Ip4Config";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Ip4Connectivity = {
    Property.interface = interface;
    Property.member = "Ip4Connectivity";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Ip6Config = {
    Property.interface = interface;
    Property.member = "Ip6Config";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Ip6Connectivity = {
    Property.interface = interface;
    Property.member = "Ip6Connectivity";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_IpInterface = {
    Property.interface = interface;
    Property.member = "IpInterface";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_LldpNeighbors = {
    Property.interface = interface;
    Property.member = "LldpNeighbors";
    Property.typ = array (dict string variant);
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Managed = {
    Property.interface = interface;
    Property.member = "Managed";
    Property.typ = basic_boolean;
    Property.access = Property.readable_writable;
    Property.annotations = [];
  }
  let p_Metered = {
    Property.interface = interface;
    Property.member = "Metered";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Mtu = {
    Property.interface = interface;
    Property.member = "Mtu";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_NmPluginMissing = {
    Property.interface = interface;
    Property.member = "NmPluginMissing";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_PhysicalPortId = {
    Property.interface = interface;
    Property.member = "PhysicalPortId";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Real = {
    Property.interface = interface;
    Property.member = "Real";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_State = {
    Property.interface = interface;
    Property.member = "State";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_StateReason = {
    Property.interface = interface;
    Property.member = "StateReason";
    Property.typ = structure (seq2 basic_uint32 basic_uint32);
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Udi = {
    Property.interface = interface;
    Property.member = "Udi";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  type 'a members = {
    m_Delete : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_Disconnect : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_GetAppliedConnection : 'a OBus_object.t -> int32 -> ((string * (string * OBus_value.V.single) list) list * int64) Lwt.t;
    m_Reapply : 'a OBus_object.t -> (string * (string * OBus_value.V.single) list) list * int64 * int32 -> unit Lwt.t;
    p_ActiveConnection : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Autoconnect : ('a OBus_object.t -> bool React.signal) * ('a OBus_object.t -> bool -> unit Lwt.t);
    p_AvailableConnections : 'a OBus_object.t -> OBus_path.t list React.signal;
    p_Capabilities : 'a OBus_object.t -> int32 React.signal;
    p_DeviceType : 'a OBus_object.t -> int32 React.signal;
    p_Dhcp4Config : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Dhcp6Config : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Driver : 'a OBus_object.t -> string React.signal;
    p_DriverVersion : 'a OBus_object.t -> string React.signal;
    p_FirmwareMissing : 'a OBus_object.t -> bool React.signal;
    p_FirmwareVersion : 'a OBus_object.t -> string React.signal;
    p_Interface : 'a OBus_object.t -> string React.signal;
    p_Ip4Address : 'a OBus_object.t -> int32 React.signal;
    p_Ip4Config : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Ip4Connectivity : 'a OBus_object.t -> int32 React.signal;
    p_Ip6Config : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Ip6Connectivity : 'a OBus_object.t -> int32 React.signal;
    p_IpInterface : 'a OBus_object.t -> string React.signal;
    p_LldpNeighbors : 'a OBus_object.t -> (string * OBus_value.V.single) list list React.signal;
    p_Managed : ('a OBus_object.t -> bool React.signal) * ('a OBus_object.t -> bool -> unit Lwt.t);
    p_Metered : 'a OBus_object.t -> int32 React.signal;
    p_Mtu : 'a OBus_object.t -> int32 React.signal;
    p_NmPluginMissing : 'a OBus_object.t -> bool React.signal;
    p_PhysicalPortId : 'a OBus_object.t -> string React.signal;
    p_Real : 'a OBus_object.t -> bool React.signal;
    p_State : 'a OBus_object.t -> int32 React.signal;
    p_StateReason : 'a OBus_object.t -> (int32 * int32) React.signal;
    p_Udi : 'a OBus_object.t -> string React.signal;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
        method_info m_Delete members.m_Delete;
        method_info m_Disconnect members.m_Disconnect;
        method_info m_GetAppliedConnection members.m_GetAppliedConnection;
        method_info m_Reapply members.m_Reapply;
      |]
      [|
        signal_info s_StateChanged;
      |]
      [|
        property_r_info p_ActiveConnection members.p_ActiveConnection;
        property_rw_info p_Autoconnect (fst members.p_Autoconnect) (snd members.p_Autoconnect);
        property_r_info p_AvailableConnections members.p_AvailableConnections;
        property_r_info p_Capabilities members.p_Capabilities;
        property_r_info p_DeviceType members.p_DeviceType;
        property_r_info p_Dhcp4Config members.p_Dhcp4Config;
        property_r_info p_Dhcp6Config members.p_Dhcp6Config;
        property_r_info p_Driver members.p_Driver;
        property_r_info p_DriverVersion members.p_DriverVersion;
        property_r_info p_FirmwareMissing members.p_FirmwareMissing;
        property_r_info p_FirmwareVersion members.p_FirmwareVersion;
        property_r_info p_Interface members.p_Interface;
        property_r_info p_Ip4Address members.p_Ip4Address;
        property_r_info p_Ip4Config members.p_Ip4Config;
        property_r_info p_Ip4Connectivity members.p_Ip4Connectivity;
        property_r_info p_Ip6Config members.p_Ip6Config;
        property_r_info p_Ip6Connectivity members.p_Ip6Connectivity;
        property_r_info p_IpInterface members.p_IpInterface;
        property_r_info p_LldpNeighbors members.p_LldpNeighbors;
        property_rw_info p_Managed (fst members.p_Managed) (snd members.p_Managed);
        property_r_info p_Metered members.p_Metered;
        property_r_info p_Mtu members.p_Mtu;
        property_r_info p_NmPluginMissing members.p_NmPluginMissing;
        property_r_info p_PhysicalPortId members.p_PhysicalPortId;
        property_r_info p_Real members.p_Real;
        property_r_info p_State members.p_State;
        property_r_info p_StateReason members.p_StateReason;
        property_r_info p_Udi members.p_Udi;
      |]
end
module Org_freedesktop_NetworkManager_Device_Bridge =
struct
  let interface = "org.freedesktop.NetworkManager.Device.Bridge"
  let s_PropertiesChanged = {
    Signal.interface = interface;
    Signal.member = "PropertiesChanged";
    Signal.args = (arg1
                       (Some "properties", dict string variant));
    Signal.annotations = [];
  }
  let p_Carrier = {
    Property.interface = interface;
    Property.member = "Carrier";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_HwAddress = {
    Property.interface = interface;
    Property.member = "HwAddress";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Slaves = {
    Property.interface = interface;
    Property.member = "Slaves";
    Property.typ = array basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  type 'a members = {
    p_Carrier : 'a OBus_object.t -> bool React.signal;
    p_HwAddress : 'a OBus_object.t -> string React.signal;
    p_Slaves : 'a OBus_object.t -> OBus_path.t list React.signal;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
      |]
      [|
        signal_info s_PropertiesChanged;
      |]
      [|
        property_r_info p_Carrier members.p_Carrier;
        property_r_info p_HwAddress members.p_HwAddress;
        property_r_info p_Slaves members.p_Slaves;
      |]
end
module Org_freedesktop_NetworkManager_Device_Generic =
struct
  let interface = "org.freedesktop.NetworkManager.Device.Generic"
  let s_PropertiesChanged = {
    Signal.interface = interface;
    Signal.member = "PropertiesChanged";
    Signal.args = (arg1
                       (Some "properties", dict string variant));
    Signal.annotations = [];
  }
  let p_HwAddress = {
    Property.interface = interface;
    Property.member = "HwAddress";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_TypeDescription = {
    Property.interface = interface;
    Property.member = "TypeDescription";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  type 'a members = {
    p_HwAddress : 'a OBus_object.t -> string React.signal;
    p_TypeDescription : 'a OBus_object.t -> string React.signal;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
      |]
      [|
        signal_info s_PropertiesChanged;
      |]
      [|
        property_r_info p_HwAddress members.p_HwAddress;
        property_r_info p_TypeDescription members.p_TypeDescription;
      |]
end
module Org_freedesktop_NetworkManager_Device_Statistics =
struct
  let interface = "org.freedesktop.NetworkManager.Device.Statistics"
  let s_PropertiesChanged = {
    Signal.interface = interface;
    Signal.member = "PropertiesChanged";
    Signal.args = (arg1
                       (Some "properties", dict string variant));
    Signal.annotations = [];
  }
  let p_RefreshRateMs = {
    Property.interface = interface;
    Property.member = "RefreshRateMs";
    Property.typ = basic_uint32;
    Property.access = Property.readable_writable;
    Property.annotations = [];
  }
  let p_RxBytes = {
    Property.interface = interface;
    Property.member = "RxBytes";
    Property.typ = basic_uint64;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_TxBytes = {
    Property.interface = interface;
    Property.member = "TxBytes";
    Property.typ = basic_uint64;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  type 'a members = {
    p_RefreshRateMs : ('a OBus_object.t -> int32 React.signal) * ('a OBus_object.t -> int32 -> unit Lwt.t);
    p_RxBytes : 'a OBus_object.t -> int64 React.signal;
    p_TxBytes : 'a OBus_object.t -> int64 React.signal;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
      |]
      [|
        signal_info s_PropertiesChanged;
      |]
      [|
        property_rw_info p_RefreshRateMs (fst members.p_RefreshRateMs) (snd members.p_RefreshRateMs);
        property_r_info p_RxBytes members.p_RxBytes;
        property_r_info p_TxBytes members.p_TxBytes;
      |]
end
module Org_freedesktop_NetworkManager_Device_Tun =
struct
  let interface = "org.freedesktop.NetworkManager.Device.Tun"
  let s_PropertiesChanged = {
    Signal.interface = interface;
    Signal.member = "PropertiesChanged";
    Signal.args = (arg1
                       (Some "properties", dict string variant));
    Signal.annotations = [];
  }
  let p_Group = {
    Property.interface = interface;
    Property.member = "Group";
    Property.typ = basic_int64;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_HwAddress = {
    Property.interface = interface;
    Property.member = "HwAddress";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Mode = {
    Property.interface = interface;
    Property.member = "Mode";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_MultiQueue = {
    Property.interface = interface;
    Property.member = "MultiQueue";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_NoPi = {
    Property.interface = interface;
    Property.member = "NoPi";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Owner = {
    Property.interface = interface;
    Property.member = "Owner";
    Property.typ = basic_int64;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_VnetHdr = {
    Property.interface = interface;
    Property.member = "VnetHdr";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  type 'a members = {
    p_Group : 'a OBus_object.t -> int64 React.signal;
    p_HwAddress : 'a OBus_object.t -> string React.signal;
    p_Mode : 'a OBus_object.t -> string React.signal;
    p_MultiQueue : 'a OBus_object.t -> bool React.signal;
    p_NoPi : 'a OBus_object.t -> bool React.signal;
    p_Owner : 'a OBus_object.t -> int64 React.signal;
    p_VnetHdr : 'a OBus_object.t -> bool React.signal;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
      |]
      [|
        signal_info s_PropertiesChanged;
      |]
      [|
        property_r_info p_Group members.p_Group;
        property_r_info p_HwAddress members.p_HwAddress;
        property_r_info p_Mode members.p_Mode;
        property_r_info p_MultiQueue members.p_MultiQueue;
        property_r_info p_NoPi members.p_NoPi;
        property_r_info p_Owner members.p_Owner;
        property_r_info p_VnetHdr members.p_VnetHdr;
      |]
end
module Org_freedesktop_NetworkManager_Device_Wired =
struct
  let interface = "org.freedesktop.NetworkManager.Device.Wired"
  let s_PropertiesChanged = {
    Signal.interface = interface;
    Signal.member = "PropertiesChanged";
    Signal.args = (arg1
                       (Some "properties", dict string variant));
    Signal.annotations = [];
  }
  let p_Carrier = {
    Property.interface = interface;
    Property.member = "Carrier";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_HwAddress = {
    Property.interface = interface;
    Property.member = "HwAddress";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_PermHwAddress = {
    Property.interface = interface;
    Property.member = "PermHwAddress";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_S390Subchannels = {
    Property.interface = interface;
    Property.member = "S390Subchannels";
    Property.typ = array basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Speed = {
    Property.interface = interface;
    Property.member = "Speed";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  type 'a members = {
    p_Carrier : 'a OBus_object.t -> bool React.signal;
    p_HwAddress : 'a OBus_object.t -> string React.signal;
    p_PermHwAddress : 'a OBus_object.t -> string React.signal;
    p_S390Subchannels : 'a OBus_object.t -> string list React.signal;
    p_Speed : 'a OBus_object.t -> int32 React.signal;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
      |]
      [|
        signal_info s_PropertiesChanged;
      |]
      [|
        property_r_info p_Carrier members.p_Carrier;
        property_r_info p_HwAddress members.p_HwAddress;
        property_r_info p_PermHwAddress members.p_PermHwAddress;
        property_r_info p_S390Subchannels members.p_S390Subchannels;
        property_r_info p_Speed members.p_Speed;
      |]
end
module Org_freedesktop_NetworkManager_DnsManager =
struct
  let interface = "org.freedesktop.NetworkManager.DnsManager"
  let p_Configuration = {
    Property.interface = interface;
    Property.member = "Configuration";
    Property.typ = array (dict string variant);
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Mode = {
    Property.interface = interface;
    Property.member = "Mode";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_RcManager = {
    Property.interface = interface;
    Property.member = "RcManager";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  type 'a members = {
    p_Configuration : 'a OBus_object.t -> (string * OBus_value.V.single) list list React.signal;
    p_Mode : 'a OBus_object.t -> string React.signal;
    p_RcManager : 'a OBus_object.t -> string React.signal;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
      |]
      [|
      |]
      [|
        property_r_info p_Configuration members.p_Configuration;
        property_r_info p_Mode members.p_Mode;
        property_r_info p_RcManager members.p_RcManager;
      |]
end
module Org_freedesktop_NetworkManager_IP4Config =
struct
  let interface = "org.freedesktop.NetworkManager.IP4Config"
  let s_PropertiesChanged = {
    Signal.interface = interface;
    Signal.member = "PropertiesChanged";
    Signal.args = (arg1
                       (Some "properties", dict string variant));
    Signal.annotations = [];
  }
  let p_AddressData = {
    Property.interface = interface;
    Property.member = "AddressData";
    Property.typ = array (dict string variant);
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Addresses = {
    Property.interface = interface;
    Property.member = "Addresses";
    Property.typ = array (array basic_uint32);
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_DnsOptions = {
    Property.interface = interface;
    Property.member = "DnsOptions";
    Property.typ = array basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_DnsPriority = {
    Property.interface = interface;
    Property.member = "DnsPriority";
    Property.typ = basic_int32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Domains = {
    Property.interface = interface;
    Property.member = "Domains";
    Property.typ = array basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Gateway = {
    Property.interface = interface;
    Property.member = "Gateway";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_NameserverData = {
    Property.interface = interface;
    Property.member = "NameserverData";
    Property.typ = array (dict string variant);
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Nameservers = {
    Property.interface = interface;
    Property.member = "Nameservers";
    Property.typ = array basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_RouteData = {
    Property.interface = interface;
    Property.member = "RouteData";
    Property.typ = array (dict string variant);
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Routes = {
    Property.interface = interface;
    Property.member = "Routes";
    Property.typ = array (array basic_uint32);
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Searches = {
    Property.interface = interface;
    Property.member = "Searches";
    Property.typ = array basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_WinsServerData = {
    Property.interface = interface;
    Property.member = "WinsServerData";
    Property.typ = array basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_WinsServers = {
    Property.interface = interface;
    Property.member = "WinsServers";
    Property.typ = array basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  type 'a members = {
    p_AddressData : 'a OBus_object.t -> (string * OBus_value.V.single) list list React.signal;
    p_Addresses : 'a OBus_object.t -> int32 list list React.signal;
    p_DnsOptions : 'a OBus_object.t -> string list React.signal;
    p_DnsPriority : 'a OBus_object.t -> int32 React.signal;
    p_Domains : 'a OBus_object.t -> string list React.signal;
    p_Gateway : 'a OBus_object.t -> string React.signal;
    p_NameserverData : 'a OBus_object.t -> (string * OBus_value.V.single) list list React.signal;
    p_Nameservers : 'a OBus_object.t -> int32 list React.signal;
    p_RouteData : 'a OBus_object.t -> (string * OBus_value.V.single) list list React.signal;
    p_Routes : 'a OBus_object.t -> int32 list list React.signal;
    p_Searches : 'a OBus_object.t -> string list React.signal;
    p_WinsServerData : 'a OBus_object.t -> string list React.signal;
    p_WinsServers : 'a OBus_object.t -> int32 list React.signal;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
      |]
      [|
        signal_info s_PropertiesChanged;
      |]
      [|
        property_r_info p_AddressData members.p_AddressData;
        property_r_info p_Addresses members.p_Addresses;
        property_r_info p_DnsOptions members.p_DnsOptions;
        property_r_info p_DnsPriority members.p_DnsPriority;
        property_r_info p_Domains members.p_Domains;
        property_r_info p_Gateway members.p_Gateway;
        property_r_info p_NameserverData members.p_NameserverData;
        property_r_info p_Nameservers members.p_Nameservers;
        property_r_info p_RouteData members.p_RouteData;
        property_r_info p_Routes members.p_Routes;
        property_r_info p_Searches members.p_Searches;
        property_r_info p_WinsServerData members.p_WinsServerData;
        property_r_info p_WinsServers members.p_WinsServers;
      |]
end
module Org_freedesktop_NetworkManager_IP6Config =
struct
  let interface = "org.freedesktop.NetworkManager.IP6Config"
  let s_PropertiesChanged = {
    Signal.interface = interface;
    Signal.member = "PropertiesChanged";
    Signal.args = (arg1
                       (Some "properties", dict string variant));
    Signal.annotations = [];
  }
  let p_AddressData = {
    Property.interface = interface;
    Property.member = "AddressData";
    Property.typ = array (dict string variant);
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Addresses = {
    Property.interface = interface;
    Property.member = "Addresses";
    Property.typ = array (structure (seq3 byte_array basic_uint32 byte_array));
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_DnsOptions = {
    Property.interface = interface;
    Property.member = "DnsOptions";
    Property.typ = array basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_DnsPriority = {
    Property.interface = interface;
    Property.member = "DnsPriority";
    Property.typ = basic_int32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Domains = {
    Property.interface = interface;
    Property.member = "Domains";
    Property.typ = array basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Gateway = {
    Property.interface = interface;
    Property.member = "Gateway";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Nameservers = {
    Property.interface = interface;
    Property.member = "Nameservers";
    Property.typ = array byte_array;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_RouteData = {
    Property.interface = interface;
    Property.member = "RouteData";
    Property.typ = array (dict string variant);
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Routes = {
    Property.interface = interface;
    Property.member = "Routes";
    Property.typ = array (structure (seq4 byte_array basic_uint32 byte_array basic_uint32));
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Searches = {
    Property.interface = interface;
    Property.member = "Searches";
    Property.typ = array basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  type 'a members = {
    p_AddressData : 'a OBus_object.t -> (string * OBus_value.V.single) list list React.signal;
    p_Addresses : 'a OBus_object.t -> (string * int32 * string) list React.signal;
    p_DnsOptions : 'a OBus_object.t -> string list React.signal;
    p_DnsPriority : 'a OBus_object.t -> int32 React.signal;
    p_Domains : 'a OBus_object.t -> string list React.signal;
    p_Gateway : 'a OBus_object.t -> string React.signal;
    p_Nameservers : 'a OBus_object.t -> string list React.signal;
    p_RouteData : 'a OBus_object.t -> (string * OBus_value.V.single) list list React.signal;
    p_Routes : 'a OBus_object.t -> (string * int32 * string * int32) list React.signal;
    p_Searches : 'a OBus_object.t -> string list React.signal;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
      |]
      [|
        signal_info s_PropertiesChanged;
      |]
      [|
        property_r_info p_AddressData members.p_AddressData;
        property_r_info p_Addresses members.p_Addresses;
        property_r_info p_DnsOptions members.p_DnsOptions;
        property_r_info p_DnsPriority members.p_DnsPriority;
        property_r_info p_Domains members.p_Domains;
        property_r_info p_Gateway members.p_Gateway;
        property_r_info p_Nameservers members.p_Nameservers;
        property_r_info p_RouteData members.p_RouteData;
        property_r_info p_Routes members.p_Routes;
        property_r_info p_Searches members.p_Searches;
      |]
end
module Org_freedesktop_NetworkManager_Settings =
struct
  let interface = "org.freedesktop.NetworkManager.Settings"
  let m_AddConnection = {
    Method.interface = interface;
    Method.member = "AddConnection";
    Method.i_args = (arg1
                       (Some "connection", dict string (dict string variant)));
    Method.o_args = (arg1
                       (Some "path", basic_object_path));
    Method.annotations = [];
  }
  let m_AddConnection2 = {
    Method.interface = interface;
    Method.member = "AddConnection2";
    Method.i_args = (arg3
                       (Some "settings", dict string (dict string variant))
                       (Some "flags", basic_uint32)
                       (Some "args", dict string variant));
    Method.o_args = (arg2
                       (Some "path", basic_object_path)
                       (Some "result", dict string variant));
    Method.annotations = [];
  }
  let m_AddConnectionUnsaved = {
    Method.interface = interface;
    Method.member = "AddConnectionUnsaved";
    Method.i_args = (arg1
                       (Some "connection", dict string (dict string variant)));
    Method.o_args = (arg1
                       (Some "path", basic_object_path));
    Method.annotations = [];
  }
  let m_GetConnectionByUuid = {
    Method.interface = interface;
    Method.member = "GetConnectionByUuid";
    Method.i_args = (arg1
                       (Some "uuid", basic_string));
    Method.o_args = (arg1
                       (Some "connection", basic_object_path));
    Method.annotations = [];
  }
  let m_ListConnections = {
    Method.interface = interface;
    Method.member = "ListConnections";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "connections", array basic_object_path));
    Method.annotations = [];
  }
  let m_LoadConnections = {
    Method.interface = interface;
    Method.member = "LoadConnections";
    Method.i_args = (arg1
                       (Some "filenames", array basic_string));
    Method.o_args = (arg2
                       (Some "status", basic_boolean)
                       (Some "failures", array basic_string));
    Method.annotations = [];
  }
  let m_ReloadConnections = {
    Method.interface = interface;
    Method.member = "ReloadConnections";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "status", basic_boolean));
    Method.annotations = [];
  }
  let m_SaveHostname = {
    Method.interface = interface;
    Method.member = "SaveHostname";
    Method.i_args = (arg1
                       (Some "hostname", basic_string));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let s_ConnectionRemoved = {
    Signal.interface = interface;
    Signal.member = "ConnectionRemoved";
    Signal.args = (arg1
                       (Some "connection", basic_object_path));
    Signal.annotations = [];
  }
  let s_NewConnection = {
    Signal.interface = interface;
    Signal.member = "NewConnection";
    Signal.args = (arg1
                       (Some "connection", basic_object_path));
    Signal.annotations = [];
  }
  let s_PropertiesChanged = {
    Signal.interface = interface;
    Signal.member = "PropertiesChanged";
    Signal.args = (arg1
                       (Some "properties", dict string variant));
    Signal.annotations = [];
  }
  let p_CanModify = {
    Property.interface = interface;
    Property.member = "CanModify";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Connections = {
    Property.interface = interface;
    Property.member = "Connections";
    Property.typ = array basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Hostname = {
    Property.interface = interface;
    Property.member = "Hostname";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  type 'a members = {
    m_AddConnection : 'a OBus_object.t -> (string * (string * OBus_value.V.single) list) list -> OBus_path.t Lwt.t;
    m_AddConnection2 : 'a OBus_object.t -> (string * (string * OBus_value.V.single) list) list * int32 * (string * OBus_value.V.single) list -> (OBus_path.t * (string * OBus_value.V.single) list) Lwt.t;
    m_AddConnectionUnsaved : 'a OBus_object.t -> (string * (string * OBus_value.V.single) list) list -> OBus_path.t Lwt.t;
    m_GetConnectionByUuid : 'a OBus_object.t -> string -> OBus_path.t Lwt.t;
    m_ListConnections : 'a OBus_object.t -> unit -> OBus_path.t list Lwt.t;
    m_LoadConnections : 'a OBus_object.t -> string list -> (bool * string list) Lwt.t;
    m_ReloadConnections : 'a OBus_object.t -> unit -> bool Lwt.t;
    m_SaveHostname : 'a OBus_object.t -> string -> unit Lwt.t;
    p_CanModify : 'a OBus_object.t -> bool React.signal;
    p_Connections : 'a OBus_object.t -> OBus_path.t list React.signal;
    p_Hostname : 'a OBus_object.t -> string React.signal;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
        method_info m_AddConnection members.m_AddConnection;
        method_info m_AddConnection2 members.m_AddConnection2;
        method_info m_AddConnectionUnsaved members.m_AddConnectionUnsaved;
        method_info m_GetConnectionByUuid members.m_GetConnectionByUuid;
        method_info m_ListConnections members.m_ListConnections;
        method_info m_LoadConnections members.m_LoadConnections;
        method_info m_ReloadConnections members.m_ReloadConnections;
        method_info m_SaveHostname members.m_SaveHostname;
      |]
      [|
        signal_info s_ConnectionRemoved;
        signal_info s_NewConnection;
        signal_info s_PropertiesChanged;
      |]
      [|
        property_r_info p_CanModify members.p_CanModify;
        property_r_info p_Connections members.p_Connections;
        property_r_info p_Hostname members.p_Hostname;
      |]
end
module Org_freedesktop_NetworkManager_Settings_Connection =
struct
  let interface = "org.freedesktop.NetworkManager.Settings.Connection"
  let m_ClearSecrets = {
    Method.interface = interface;
    Method.member = "ClearSecrets";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_Delete = {
    Method.interface = interface;
    Method.member = "Delete";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_GetSecrets = {
    Method.interface = interface;
    Method.member = "GetSecrets";
    Method.i_args = (arg1
                       (Some "setting_name", basic_string));
    Method.o_args = (arg1
                       (Some "secrets", dict string (dict string variant)));
    Method.annotations = [];
  }
  let m_GetSettings = {
    Method.interface = interface;
    Method.member = "GetSettings";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "settings", dict string (dict string variant)));
    Method.annotations = [];
  }
  let m_Save = {
    Method.interface = interface;
    Method.member = "Save";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_Update = {
    Method.interface = interface;
    Method.member = "Update";
    Method.i_args = (arg1
                       (Some "properties", dict string (dict string variant)));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_Update2 = {
    Method.interface = interface;
    Method.member = "Update2";
    Method.i_args = (arg3
                       (Some "settings", dict string (dict string variant))
                       (Some "flags", basic_uint32)
                       (Some "args", dict string variant));
    Method.o_args = (arg1
                       (Some "result", dict string variant));
    Method.annotations = [];
  }
  let m_UpdateUnsaved = {
    Method.interface = interface;
    Method.member = "UpdateUnsaved";
    Method.i_args = (arg1
                       (Some "properties", dict string (dict string variant)));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let s_PropertiesChanged = {
    Signal.interface = interface;
    Signal.member = "PropertiesChanged";
    Signal.args = (arg1
                       (Some "properties", dict string variant));
    Signal.annotations = [];
  }
  let s_Removed = {
    Signal.interface = interface;
    Signal.member = "Removed";
    Signal.args = (arg0);
    Signal.annotations = [];
  }
  let s_Updated = {
    Signal.interface = interface;
    Signal.member = "Updated";
    Signal.args = (arg0);
    Signal.annotations = [];
  }
  let p_Filename = {
    Property.interface = interface;
    Property.member = "Filename";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Flags = {
    Property.interface = interface;
    Property.member = "Flags";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Unsaved = {
    Property.interface = interface;
    Property.member = "Unsaved";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  type 'a members = {
    m_ClearSecrets : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_Delete : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_GetSecrets : 'a OBus_object.t -> string -> (string * (string * OBus_value.V.single) list) list Lwt.t;
    m_GetSettings : 'a OBus_object.t -> unit -> (string * (string * OBus_value.V.single) list) list Lwt.t;
    m_Save : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_Update : 'a OBus_object.t -> (string * (string * OBus_value.V.single) list) list -> unit Lwt.t;
    m_Update2 : 'a OBus_object.t -> (string * (string * OBus_value.V.single) list) list * int32 * (string * OBus_value.V.single) list -> (string * OBus_value.V.single) list Lwt.t;
    m_UpdateUnsaved : 'a OBus_object.t -> (string * (string * OBus_value.V.single) list) list -> unit Lwt.t;
    p_Filename : 'a OBus_object.t -> string React.signal;
    p_Flags : 'a OBus_object.t -> int32 React.signal;
    p_Unsaved : 'a OBus_object.t -> bool React.signal;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
        method_info m_ClearSecrets members.m_ClearSecrets;
        method_info m_Delete members.m_Delete;
        method_info m_GetSecrets members.m_GetSecrets;
        method_info m_GetSettings members.m_GetSettings;
        method_info m_Save members.m_Save;
        method_info m_Update members.m_Update;
        method_info m_Update2 members.m_Update2;
        method_info m_UpdateUnsaved members.m_UpdateUnsaved;
      |]
      [|
        signal_info s_PropertiesChanged;
        signal_info s_Removed;
        signal_info s_Updated;
      |]
      [|
        property_r_info p_Filename members.p_Filename;
        property_r_info p_Flags members.p_Flags;
        property_r_info p_Unsaved members.p_Unsaved;
      |]
end
