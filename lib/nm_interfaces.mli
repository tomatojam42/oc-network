(* File auto-generated by obus-gen-interface, DO NOT EDIT. *)
open OBus_member
module Org_freedesktop_NetworkManager : sig
  val interface : OBus_name.interface
  val m_ActivateConnection : (OBus_path.t * OBus_path.t * OBus_path.t, OBus_path.t) Method.t
  val m_AddAndActivateConnection : ((string * (string * OBus_value.V.single) list) list * OBus_path.t * OBus_path.t, OBus_path.t * OBus_path.t) Method.t
  val m_AddAndActivateConnection2 : ((string * (string * OBus_value.V.single) list) list * OBus_path.t * OBus_path.t * (string * OBus_value.V.single) list, OBus_path.t * OBus_path.t * (string * OBus_value.V.single) list) Method.t
  val m_CheckConnectivity : (unit, int32) Method.t
  val m_CheckpointAdjustRollbackTimeout : (OBus_path.t * int32, unit) Method.t
  val m_CheckpointCreate : (OBus_path.t list * int32 * int32, OBus_path.t) Method.t
  val m_CheckpointDestroy : (OBus_path.t, unit) Method.t
  val m_CheckpointRollback : (OBus_path.t, (string * int32) list) Method.t
  val m_DeactivateConnection : (OBus_path.t, unit) Method.t
  val m_Enable : (bool, unit) Method.t
  val m_GetAllDevices : (unit, OBus_path.t list) Method.t
  val m_GetDeviceByIpIface : (string, OBus_path.t) Method.t
  val m_GetDevices : (unit, OBus_path.t list) Method.t
  val m_GetLogging : (unit, string * string) Method.t
  val m_GetPermissions : (unit, (string * string) list) Method.t
  val m_Reload : (int32, unit) Method.t
  val m_SetLogging : (string * string, unit) Method.t
  val m_Sleep : (bool, unit) Method.t
  val m_state : (unit, int32) Method.t
  val s_CheckPermissions : unit Signal.t
  val s_DeviceAdded : OBus_path.t Signal.t
  val s_DeviceRemoved : OBus_path.t Signal.t
  val s_PropertiesChanged : (string * OBus_value.V.single) list Signal.t
  val s_StateChanged : int32 Signal.t
  val p_ActivatingConnection : (OBus_path.t, [ `readable ]) Property.t
  val p_ActiveConnections : (OBus_path.t list, [ `readable ]) Property.t
  val p_AllDevices : (OBus_path.t list, [ `readable ]) Property.t
  val p_Capabilities : (int32, [ `readable ]) Property.t
  val p_Checkpoints : (OBus_path.t list, [ `readable ]) Property.t
  val p_Connectivity : (int32, [ `readable ]) Property.t
  val p_ConnectivityCheckAvailable : (bool, [ `readable ]) Property.t
  val p_ConnectivityCheckEnabled : (bool, [ `readable | `writable ]) Property.t
  val p_ConnectivityCheckUri : (string, [ `readable ]) Property.t
  val p_Devices : (OBus_path.t list, [ `readable ]) Property.t
  val p_GlobalDnsConfiguration : ((string * OBus_value.V.single) list, [ `readable | `writable ]) Property.t
  val p_Metered : (int32, [ `readable ]) Property.t
  val p_NetworkingEnabled : (bool, [ `readable ]) Property.t
  val p_PrimaryConnection : (OBus_path.t, [ `readable ]) Property.t
  val p_PrimaryConnectionType : (string, [ `readable ]) Property.t
  val p_Startup : (bool, [ `readable ]) Property.t
  val p_State : (int32, [ `readable ]) Property.t
  val p_Version : (string, [ `readable ]) Property.t
  val p_WimaxEnabled : (bool, [ `readable | `writable ]) Property.t
  val p_WimaxHardwareEnabled : (bool, [ `readable ]) Property.t
  val p_WirelessEnabled : (bool, [ `readable | `writable ]) Property.t
  val p_WirelessHardwareEnabled : (bool, [ `readable ]) Property.t
  val p_WwanEnabled : (bool, [ `readable | `writable ]) Property.t
  val p_WwanHardwareEnabled : (bool, [ `readable ]) Property.t
  type 'a members = {
    m_ActivateConnection : 'a OBus_object.t -> OBus_path.t * OBus_path.t * OBus_path.t -> OBus_path.t Lwt.t;
    m_AddAndActivateConnection : 'a OBus_object.t -> (string * (string * OBus_value.V.single) list) list * OBus_path.t * OBus_path.t -> (OBus_path.t * OBus_path.t) Lwt.t;
    m_AddAndActivateConnection2 : 'a OBus_object.t -> (string * (string * OBus_value.V.single) list) list * OBus_path.t * OBus_path.t * (string * OBus_value.V.single) list -> (OBus_path.t * OBus_path.t * (string * OBus_value.V.single) list) Lwt.t;
    m_CheckConnectivity : 'a OBus_object.t -> unit -> int32 Lwt.t;
    m_CheckpointAdjustRollbackTimeout : 'a OBus_object.t -> OBus_path.t * int32 -> unit Lwt.t;
    m_CheckpointCreate : 'a OBus_object.t -> OBus_path.t list * int32 * int32 -> OBus_path.t Lwt.t;
    m_CheckpointDestroy : 'a OBus_object.t -> OBus_path.t -> unit Lwt.t;
    m_CheckpointRollback : 'a OBus_object.t -> OBus_path.t -> (string * int32) list Lwt.t;
    m_DeactivateConnection : 'a OBus_object.t -> OBus_path.t -> unit Lwt.t;
    m_Enable : 'a OBus_object.t -> bool -> unit Lwt.t;
    m_GetAllDevices : 'a OBus_object.t -> unit -> OBus_path.t list Lwt.t;
    m_GetDeviceByIpIface : 'a OBus_object.t -> string -> OBus_path.t Lwt.t;
    m_GetDevices : 'a OBus_object.t -> unit -> OBus_path.t list Lwt.t;
    m_GetLogging : 'a OBus_object.t -> unit -> (string * string) Lwt.t;
    m_GetPermissions : 'a OBus_object.t -> unit -> (string * string) list Lwt.t;
    m_Reload : 'a OBus_object.t -> int32 -> unit Lwt.t;
    m_SetLogging : 'a OBus_object.t -> string * string -> unit Lwt.t;
    m_Sleep : 'a OBus_object.t -> bool -> unit Lwt.t;
    m_state : 'a OBus_object.t -> unit -> int32 Lwt.t;
    p_ActivatingConnection : 'a OBus_object.t -> OBus_path.t React.signal;
    p_ActiveConnections : 'a OBus_object.t -> OBus_path.t list React.signal;
    p_AllDevices : 'a OBus_object.t -> OBus_path.t list React.signal;
    p_Capabilities : 'a OBus_object.t -> int32 React.signal;
    p_Checkpoints : 'a OBus_object.t -> OBus_path.t list React.signal;
    p_Connectivity : 'a OBus_object.t -> int32 React.signal;
    p_ConnectivityCheckAvailable : 'a OBus_object.t -> bool React.signal;
    p_ConnectivityCheckEnabled : ('a OBus_object.t -> bool React.signal) * ('a OBus_object.t -> bool -> unit Lwt.t);
    p_ConnectivityCheckUri : 'a OBus_object.t -> string React.signal;
    p_Devices : 'a OBus_object.t -> OBus_path.t list React.signal;
    p_GlobalDnsConfiguration : ('a OBus_object.t -> (string * OBus_value.V.single) list React.signal) * ('a OBus_object.t -> (string * OBus_value.V.single) list -> unit Lwt.t);
    p_Metered : 'a OBus_object.t -> int32 React.signal;
    p_NetworkingEnabled : 'a OBus_object.t -> bool React.signal;
    p_PrimaryConnection : 'a OBus_object.t -> OBus_path.t React.signal;
    p_PrimaryConnectionType : 'a OBus_object.t -> string React.signal;
    p_Startup : 'a OBus_object.t -> bool React.signal;
    p_State : 'a OBus_object.t -> int32 React.signal;
    p_Version : 'a OBus_object.t -> string React.signal;
    p_WimaxEnabled : ('a OBus_object.t -> bool React.signal) * ('a OBus_object.t -> bool -> unit Lwt.t);
    p_WimaxHardwareEnabled : 'a OBus_object.t -> bool React.signal;
    p_WirelessEnabled : ('a OBus_object.t -> bool React.signal) * ('a OBus_object.t -> bool -> unit Lwt.t);
    p_WirelessHardwareEnabled : 'a OBus_object.t -> bool React.signal;
    p_WwanEnabled : ('a OBus_object.t -> bool React.signal) * ('a OBus_object.t -> bool -> unit Lwt.t);
    p_WwanHardwareEnabled : 'a OBus_object.t -> bool React.signal;
  }
  val make : 'a members -> 'a OBus_object.interface
end
module Org_freedesktop_NetworkManager_AgentManager : sig
  val interface : OBus_name.interface
  val m_Register : (string, unit) Method.t
  val m_RegisterWithCapabilities : (string * int32, unit) Method.t
  val m_Unregister : (unit, unit) Method.t
  type 'a members = {
    m_Register : 'a OBus_object.t -> string -> unit Lwt.t;
    m_RegisterWithCapabilities : 'a OBus_object.t -> string * int32 -> unit Lwt.t;
    m_Unregister : 'a OBus_object.t -> unit -> unit Lwt.t;
  }
  val make : 'a members -> 'a OBus_object.interface
end
module Org_freedesktop_NetworkManager_Connection_Active : sig
  val interface : OBus_name.interface
  val s_PropertiesChanged : (string * OBus_value.V.single) list Signal.t
  val s_StateChanged : (int32 * int32) Signal.t
  val p_Connection : (OBus_path.t, [ `readable ]) Property.t
  val p_Default : (bool, [ `readable ]) Property.t
  val p_Default6 : (bool, [ `readable ]) Property.t
  val p_Devices : (OBus_path.t list, [ `readable ]) Property.t
  val p_Dhcp4Config : (OBus_path.t, [ `readable ]) Property.t
  val p_Dhcp6Config : (OBus_path.t, [ `readable ]) Property.t
  val p_Id : (string, [ `readable ]) Property.t
  val p_Ip4Config : (OBus_path.t, [ `readable ]) Property.t
  val p_Ip6Config : (OBus_path.t, [ `readable ]) Property.t
  val p_Master : (OBus_path.t, [ `readable ]) Property.t
  val p_SpecificObject : (OBus_path.t, [ `readable ]) Property.t
  val p_State : (int32, [ `readable ]) Property.t
  val p_StateFlags : (int32, [ `readable ]) Property.t
  val p_Type : (string, [ `readable ]) Property.t
  val p_Uuid : (string, [ `readable ]) Property.t
  val p_Vpn : (bool, [ `readable ]) Property.t
  type 'a members = {
    p_Connection : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Default : 'a OBus_object.t -> bool React.signal;
    p_Default6 : 'a OBus_object.t -> bool React.signal;
    p_Devices : 'a OBus_object.t -> OBus_path.t list React.signal;
    p_Dhcp4Config : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Dhcp6Config : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Id : 'a OBus_object.t -> string React.signal;
    p_Ip4Config : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Ip6Config : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Master : 'a OBus_object.t -> OBus_path.t React.signal;
    p_SpecificObject : 'a OBus_object.t -> OBus_path.t React.signal;
    p_State : 'a OBus_object.t -> int32 React.signal;
    p_StateFlags : 'a OBus_object.t -> int32 React.signal;
    p_Type : 'a OBus_object.t -> string React.signal;
    p_Uuid : 'a OBus_object.t -> string React.signal;
    p_Vpn : 'a OBus_object.t -> bool React.signal;
  }
  val make : 'a members -> 'a OBus_object.interface
end
module Org_freedesktop_NetworkManager_DHCP4Config : sig
  val interface : OBus_name.interface
  val s_PropertiesChanged : (string * OBus_value.V.single) list Signal.t
  val p_Options : ((string * OBus_value.V.single) list, [ `readable ]) Property.t
  type 'a members = {
    p_Options : 'a OBus_object.t -> (string * OBus_value.V.single) list React.signal;
  }
  val make : 'a members -> 'a OBus_object.interface
end
module Org_freedesktop_NetworkManager_Device : sig
  val interface : OBus_name.interface
  val m_Delete : (unit, unit) Method.t
  val m_Disconnect : (unit, unit) Method.t
  val m_GetAppliedConnection : (int32, (string * (string * OBus_value.V.single) list) list * int64) Method.t
  val m_Reapply : ((string * (string * OBus_value.V.single) list) list * int64 * int32, unit) Method.t
  val s_StateChanged : (int32 * int32 * int32) Signal.t
  val p_ActiveConnection : (OBus_path.t, [ `readable ]) Property.t
  val p_Autoconnect : (bool, [ `readable | `writable ]) Property.t
  val p_AvailableConnections : (OBus_path.t list, [ `readable ]) Property.t
  val p_Capabilities : (int32, [ `readable ]) Property.t
  val p_DeviceType : (int32, [ `readable ]) Property.t
  val p_Dhcp4Config : (OBus_path.t, [ `readable ]) Property.t
  val p_Dhcp6Config : (OBus_path.t, [ `readable ]) Property.t
  val p_Driver : (string, [ `readable ]) Property.t
  val p_DriverVersion : (string, [ `readable ]) Property.t
  val p_FirmwareMissing : (bool, [ `readable ]) Property.t
  val p_FirmwareVersion : (string, [ `readable ]) Property.t
  val p_Interface : (string, [ `readable ]) Property.t
  val p_Ip4Address : (int32, [ `readable ]) Property.t
  val p_Ip4Config : (OBus_path.t, [ `readable ]) Property.t
  val p_Ip4Connectivity : (int32, [ `readable ]) Property.t
  val p_Ip6Config : (OBus_path.t, [ `readable ]) Property.t
  val p_Ip6Connectivity : (int32, [ `readable ]) Property.t
  val p_IpInterface : (string, [ `readable ]) Property.t
  val p_LldpNeighbors : ((string * OBus_value.V.single) list list, [ `readable ]) Property.t
  val p_Managed : (bool, [ `readable | `writable ]) Property.t
  val p_Metered : (int32, [ `readable ]) Property.t
  val p_Mtu : (int32, [ `readable ]) Property.t
  val p_NmPluginMissing : (bool, [ `readable ]) Property.t
  val p_PhysicalPortId : (string, [ `readable ]) Property.t
  val p_Real : (bool, [ `readable ]) Property.t
  val p_State : (int32, [ `readable ]) Property.t
  val p_StateReason : (int32 * int32, [ `readable ]) Property.t
  val p_Udi : (string, [ `readable ]) Property.t
  type 'a members = {
    m_Delete : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_Disconnect : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_GetAppliedConnection : 'a OBus_object.t -> int32 -> ((string * (string * OBus_value.V.single) list) list * int64) Lwt.t;
    m_Reapply : 'a OBus_object.t -> (string * (string * OBus_value.V.single) list) list * int64 * int32 -> unit Lwt.t;
    p_ActiveConnection : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Autoconnect : ('a OBus_object.t -> bool React.signal) * ('a OBus_object.t -> bool -> unit Lwt.t);
    p_AvailableConnections : 'a OBus_object.t -> OBus_path.t list React.signal;
    p_Capabilities : 'a OBus_object.t -> int32 React.signal;
    p_DeviceType : 'a OBus_object.t -> int32 React.signal;
    p_Dhcp4Config : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Dhcp6Config : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Driver : 'a OBus_object.t -> string React.signal;
    p_DriverVersion : 'a OBus_object.t -> string React.signal;
    p_FirmwareMissing : 'a OBus_object.t -> bool React.signal;
    p_FirmwareVersion : 'a OBus_object.t -> string React.signal;
    p_Interface : 'a OBus_object.t -> string React.signal;
    p_Ip4Address : 'a OBus_object.t -> int32 React.signal;
    p_Ip4Config : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Ip4Connectivity : 'a OBus_object.t -> int32 React.signal;
    p_Ip6Config : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Ip6Connectivity : 'a OBus_object.t -> int32 React.signal;
    p_IpInterface : 'a OBus_object.t -> string React.signal;
    p_LldpNeighbors : 'a OBus_object.t -> (string * OBus_value.V.single) list list React.signal;
    p_Managed : ('a OBus_object.t -> bool React.signal) * ('a OBus_object.t -> bool -> unit Lwt.t);
    p_Metered : 'a OBus_object.t -> int32 React.signal;
    p_Mtu : 'a OBus_object.t -> int32 React.signal;
    p_NmPluginMissing : 'a OBus_object.t -> bool React.signal;
    p_PhysicalPortId : 'a OBus_object.t -> string React.signal;
    p_Real : 'a OBus_object.t -> bool React.signal;
    p_State : 'a OBus_object.t -> int32 React.signal;
    p_StateReason : 'a OBus_object.t -> (int32 * int32) React.signal;
    p_Udi : 'a OBus_object.t -> string React.signal;
  }
  val make : 'a members -> 'a OBus_object.interface
end
module Org_freedesktop_NetworkManager_Device_Bridge : sig
  val interface : OBus_name.interface
  val s_PropertiesChanged : (string * OBus_value.V.single) list Signal.t
  val p_Carrier : (bool, [ `readable ]) Property.t
  val p_HwAddress : (string, [ `readable ]) Property.t
  val p_Slaves : (OBus_path.t list, [ `readable ]) Property.t
  type 'a members = {
    p_Carrier : 'a OBus_object.t -> bool React.signal;
    p_HwAddress : 'a OBus_object.t -> string React.signal;
    p_Slaves : 'a OBus_object.t -> OBus_path.t list React.signal;
  }
  val make : 'a members -> 'a OBus_object.interface
end
module Org_freedesktop_NetworkManager_Device_Generic : sig
  val interface : OBus_name.interface
  val s_PropertiesChanged : (string * OBus_value.V.single) list Signal.t
  val p_HwAddress : (string, [ `readable ]) Property.t
  val p_TypeDescription : (string, [ `readable ]) Property.t
  type 'a members = {
    p_HwAddress : 'a OBus_object.t -> string React.signal;
    p_TypeDescription : 'a OBus_object.t -> string React.signal;
  }
  val make : 'a members -> 'a OBus_object.interface
end
module Org_freedesktop_NetworkManager_Device_Statistics : sig
  val interface : OBus_name.interface
  val s_PropertiesChanged : (string * OBus_value.V.single) list Signal.t
  val p_RefreshRateMs : (int32, [ `readable | `writable ]) Property.t
  val p_RxBytes : (int64, [ `readable ]) Property.t
  val p_TxBytes : (int64, [ `readable ]) Property.t
  type 'a members = {
    p_RefreshRateMs : ('a OBus_object.t -> int32 React.signal) * ('a OBus_object.t -> int32 -> unit Lwt.t);
    p_RxBytes : 'a OBus_object.t -> int64 React.signal;
    p_TxBytes : 'a OBus_object.t -> int64 React.signal;
  }
  val make : 'a members -> 'a OBus_object.interface
end
module Org_freedesktop_NetworkManager_Device_Tun : sig
  val interface : OBus_name.interface
  val s_PropertiesChanged : (string * OBus_value.V.single) list Signal.t
  val p_Group : (int64, [ `readable ]) Property.t
  val p_HwAddress : (string, [ `readable ]) Property.t
  val p_Mode : (string, [ `readable ]) Property.t
  val p_MultiQueue : (bool, [ `readable ]) Property.t
  val p_NoPi : (bool, [ `readable ]) Property.t
  val p_Owner : (int64, [ `readable ]) Property.t
  val p_VnetHdr : (bool, [ `readable ]) Property.t
  type 'a members = {
    p_Group : 'a OBus_object.t -> int64 React.signal;
    p_HwAddress : 'a OBus_object.t -> string React.signal;
    p_Mode : 'a OBus_object.t -> string React.signal;
    p_MultiQueue : 'a OBus_object.t -> bool React.signal;
    p_NoPi : 'a OBus_object.t -> bool React.signal;
    p_Owner : 'a OBus_object.t -> int64 React.signal;
    p_VnetHdr : 'a OBus_object.t -> bool React.signal;
  }
  val make : 'a members -> 'a OBus_object.interface
end
module Org_freedesktop_NetworkManager_Device_Wired : sig
  val interface : OBus_name.interface
  val s_PropertiesChanged : (string * OBus_value.V.single) list Signal.t
  val p_Carrier : (bool, [ `readable ]) Property.t
  val p_HwAddress : (string, [ `readable ]) Property.t
  val p_PermHwAddress : (string, [ `readable ]) Property.t
  val p_S390Subchannels : (string list, [ `readable ]) Property.t
  val p_Speed : (int32, [ `readable ]) Property.t
  type 'a members = {
    p_Carrier : 'a OBus_object.t -> bool React.signal;
    p_HwAddress : 'a OBus_object.t -> string React.signal;
    p_PermHwAddress : 'a OBus_object.t -> string React.signal;
    p_S390Subchannels : 'a OBus_object.t -> string list React.signal;
    p_Speed : 'a OBus_object.t -> int32 React.signal;
  }
  val make : 'a members -> 'a OBus_object.interface
end
module Org_freedesktop_NetworkManager_DnsManager : sig
  val interface : OBus_name.interface
  val p_Configuration : ((string * OBus_value.V.single) list list, [ `readable ]) Property.t
  val p_Mode : (string, [ `readable ]) Property.t
  val p_RcManager : (string, [ `readable ]) Property.t
  type 'a members = {
    p_Configuration : 'a OBus_object.t -> (string * OBus_value.V.single) list list React.signal;
    p_Mode : 'a OBus_object.t -> string React.signal;
    p_RcManager : 'a OBus_object.t -> string React.signal;
  }
  val make : 'a members -> 'a OBus_object.interface
end
module Org_freedesktop_NetworkManager_IP4Config : sig
  val interface : OBus_name.interface
  val s_PropertiesChanged : (string * OBus_value.V.single) list Signal.t
  val p_AddressData : ((string * OBus_value.V.single) list list, [ `readable ]) Property.t
  val p_Addresses : (int32 list list, [ `readable ]) Property.t
  val p_DnsOptions : (string list, [ `readable ]) Property.t
  val p_DnsPriority : (int32, [ `readable ]) Property.t
  val p_Domains : (string list, [ `readable ]) Property.t
  val p_Gateway : (string, [ `readable ]) Property.t
  val p_NameserverData : ((string * OBus_value.V.single) list list, [ `readable ]) Property.t
  val p_Nameservers : (int32 list, [ `readable ]) Property.t
  val p_RouteData : ((string * OBus_value.V.single) list list, [ `readable ]) Property.t
  val p_Routes : (int32 list list, [ `readable ]) Property.t
  val p_Searches : (string list, [ `readable ]) Property.t
  val p_WinsServerData : (string list, [ `readable ]) Property.t
  val p_WinsServers : (int32 list, [ `readable ]) Property.t
  type 'a members = {
    p_AddressData : 'a OBus_object.t -> (string * OBus_value.V.single) list list React.signal;
    p_Addresses : 'a OBus_object.t -> int32 list list React.signal;
    p_DnsOptions : 'a OBus_object.t -> string list React.signal;
    p_DnsPriority : 'a OBus_object.t -> int32 React.signal;
    p_Domains : 'a OBus_object.t -> string list React.signal;
    p_Gateway : 'a OBus_object.t -> string React.signal;
    p_NameserverData : 'a OBus_object.t -> (string * OBus_value.V.single) list list React.signal;
    p_Nameservers : 'a OBus_object.t -> int32 list React.signal;
    p_RouteData : 'a OBus_object.t -> (string * OBus_value.V.single) list list React.signal;
    p_Routes : 'a OBus_object.t -> int32 list list React.signal;
    p_Searches : 'a OBus_object.t -> string list React.signal;
    p_WinsServerData : 'a OBus_object.t -> string list React.signal;
    p_WinsServers : 'a OBus_object.t -> int32 list React.signal;
  }
  val make : 'a members -> 'a OBus_object.interface
end
module Org_freedesktop_NetworkManager_IP6Config : sig
  val interface : OBus_name.interface
  val s_PropertiesChanged : (string * OBus_value.V.single) list Signal.t
  val p_AddressData : ((string * OBus_value.V.single) list list, [ `readable ]) Property.t
  val p_Addresses : ((string * int32 * string) list, [ `readable ]) Property.t
  val p_DnsOptions : (string list, [ `readable ]) Property.t
  val p_DnsPriority : (int32, [ `readable ]) Property.t
  val p_Domains : (string list, [ `readable ]) Property.t
  val p_Gateway : (string, [ `readable ]) Property.t
  val p_Nameservers : (string list, [ `readable ]) Property.t
  val p_RouteData : ((string * OBus_value.V.single) list list, [ `readable ]) Property.t
  val p_Routes : ((string * int32 * string * int32) list, [ `readable ]) Property.t
  val p_Searches : (string list, [ `readable ]) Property.t
  type 'a members = {
    p_AddressData : 'a OBus_object.t -> (string * OBus_value.V.single) list list React.signal;
    p_Addresses : 'a OBus_object.t -> (string * int32 * string) list React.signal;
    p_DnsOptions : 'a OBus_object.t -> string list React.signal;
    p_DnsPriority : 'a OBus_object.t -> int32 React.signal;
    p_Domains : 'a OBus_object.t -> string list React.signal;
    p_Gateway : 'a OBus_object.t -> string React.signal;
    p_Nameservers : 'a OBus_object.t -> string list React.signal;
    p_RouteData : 'a OBus_object.t -> (string * OBus_value.V.single) list list React.signal;
    p_Routes : 'a OBus_object.t -> (string * int32 * string * int32) list React.signal;
    p_Searches : 'a OBus_object.t -> string list React.signal;
  }
  val make : 'a members -> 'a OBus_object.interface
end
module Org_freedesktop_NetworkManager_Settings : sig
  val interface : OBus_name.interface
  val m_AddConnection : ((string * (string * OBus_value.V.single) list) list, OBus_path.t) Method.t
  val m_AddConnection2 : ((string * (string * OBus_value.V.single) list) list * int32 * (string * OBus_value.V.single) list, OBus_path.t * (string * OBus_value.V.single) list) Method.t
  val m_AddConnectionUnsaved : ((string * (string * OBus_value.V.single) list) list, OBus_path.t) Method.t
  val m_GetConnectionByUuid : (string, OBus_path.t) Method.t
  val m_ListConnections : (unit, OBus_path.t list) Method.t
  val m_LoadConnections : (string list, bool * string list) Method.t
  val m_ReloadConnections : (unit, bool) Method.t
  val m_SaveHostname : (string, unit) Method.t
  val s_ConnectionRemoved : OBus_path.t Signal.t
  val s_NewConnection : OBus_path.t Signal.t
  val s_PropertiesChanged : (string * OBus_value.V.single) list Signal.t
  val p_CanModify : (bool, [ `readable ]) Property.t
  val p_Connections : (OBus_path.t list, [ `readable ]) Property.t
  val p_Hostname : (string, [ `readable ]) Property.t
  type 'a members = {
    m_AddConnection : 'a OBus_object.t -> (string * (string * OBus_value.V.single) list) list -> OBus_path.t Lwt.t;
    m_AddConnection2 : 'a OBus_object.t -> (string * (string * OBus_value.V.single) list) list * int32 * (string * OBus_value.V.single) list -> (OBus_path.t * (string * OBus_value.V.single) list) Lwt.t;
    m_AddConnectionUnsaved : 'a OBus_object.t -> (string * (string * OBus_value.V.single) list) list -> OBus_path.t Lwt.t;
    m_GetConnectionByUuid : 'a OBus_object.t -> string -> OBus_path.t Lwt.t;
    m_ListConnections : 'a OBus_object.t -> unit -> OBus_path.t list Lwt.t;
    m_LoadConnections : 'a OBus_object.t -> string list -> (bool * string list) Lwt.t;
    m_ReloadConnections : 'a OBus_object.t -> unit -> bool Lwt.t;
    m_SaveHostname : 'a OBus_object.t -> string -> unit Lwt.t;
    p_CanModify : 'a OBus_object.t -> bool React.signal;
    p_Connections : 'a OBus_object.t -> OBus_path.t list React.signal;
    p_Hostname : 'a OBus_object.t -> string React.signal;
  }
  val make : 'a members -> 'a OBus_object.interface
end
module Org_freedesktop_NetworkManager_Settings_Connection : sig
  val interface : OBus_name.interface
  val m_ClearSecrets : (unit, unit) Method.t
  val m_Delete : (unit, unit) Method.t
  val m_GetSecrets : (string, (string * (string * OBus_value.V.single) list) list) Method.t
  val m_GetSettings : (unit, (string * (string * OBus_value.V.single) list) list) Method.t
  val m_Save : (unit, unit) Method.t
  val m_Update : ((string * (string * OBus_value.V.single) list) list, unit) Method.t
  val m_Update2 : ((string * (string * OBus_value.V.single) list) list * int32 * (string * OBus_value.V.single) list, (string * OBus_value.V.single) list) Method.t
  val m_UpdateUnsaved : ((string * (string * OBus_value.V.single) list) list, unit) Method.t
  val s_PropertiesChanged : (string * OBus_value.V.single) list Signal.t
  val s_Removed : unit Signal.t
  val s_Updated : unit Signal.t
  val p_Filename : (string, [ `readable ]) Property.t
  val p_Flags : (int32, [ `readable ]) Property.t
  val p_Unsaved : (bool, [ `readable ]) Property.t
  type 'a members = {
    m_ClearSecrets : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_Delete : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_GetSecrets : 'a OBus_object.t -> string -> (string * (string * OBus_value.V.single) list) list Lwt.t;
    m_GetSettings : 'a OBus_object.t -> unit -> (string * (string * OBus_value.V.single) list) list Lwt.t;
    m_Save : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_Update : 'a OBus_object.t -> (string * (string * OBus_value.V.single) list) list -> unit Lwt.t;
    m_Update2 : 'a OBus_object.t -> (string * (string * OBus_value.V.single) list) list * int32 * (string * OBus_value.V.single) list -> (string * OBus_value.V.single) list Lwt.t;
    m_UpdateUnsaved : 'a OBus_object.t -> (string * (string * OBus_value.V.single) list) list -> unit Lwt.t;
    p_Filename : 'a OBus_object.t -> string React.signal;
    p_Flags : 'a OBus_object.t -> int32 React.signal;
    p_Unsaved : 'a OBus_object.t -> bool React.signal;
  }
  val make : 'a members -> 'a OBus_object.interface
end
