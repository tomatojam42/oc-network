(* File auto-generated by obus-gen-interface, DO NOT EDIT. *)
open OBus_value
open OBus_value.C
open OBus_member
open OBus_object
module Org_freedesktop_NetworkManager =
struct
  let interface = "org.freedesktop.NetworkManager"
  let m_ActivateConnection = {
    Method.interface = interface;
    Method.member = "ActivateConnection";
    Method.i_args = (arg3
                       (Some "connection", basic_object_path)
                       (Some "device", basic_object_path)
                       (Some "specific_object", basic_object_path));
    Method.o_args = (arg1
                       (Some "active_connection", basic_object_path));
    Method.annotations = [];
  }
  let m_AddAndActivateConnection = {
    Method.interface = interface;
    Method.member = "AddAndActivateConnection";
    Method.i_args = (arg3
                       (Some "connection", dict string (dict string variant))
                       (Some "device", basic_object_path)
                       (Some "specific_object", basic_object_path));
    Method.o_args = (arg2
                       (Some "path", basic_object_path)
                       (Some "active_connection", basic_object_path));
    Method.annotations = [];
  }
  let m_CheckConnectivity = {
    Method.interface = interface;
    Method.member = "CheckConnectivity";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "connectivity", basic_uint32));
    Method.annotations = [];
  }
  let m_CheckpointCreate = {
    Method.interface = interface;
    Method.member = "CheckpointCreate";
    Method.i_args = (arg3
                       (Some "devices", array basic_object_path)
                       (Some "rollback_timeout", basic_uint32)
                       (Some "flags", basic_uint32));
    Method.o_args = (arg1
                       (Some "checkpoint", basic_object_path));
    Method.annotations = [];
  }
  let m_CheckpointDestroy = {
    Method.interface = interface;
    Method.member = "CheckpointDestroy";
    Method.i_args = (arg1
                       (Some "checkpoint", basic_object_path));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_CheckpointRollback = {
    Method.interface = interface;
    Method.member = "CheckpointRollback";
    Method.i_args = (arg1
                       (Some "checkpoint", basic_object_path));
    Method.o_args = (arg1
                       (Some "result", dict string basic_uint32));
    Method.annotations = [];
  }
  let m_DeactivateConnection = {
    Method.interface = interface;
    Method.member = "DeactivateConnection";
    Method.i_args = (arg1
                       (Some "active_connection", basic_object_path));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_Enable = {
    Method.interface = interface;
    Method.member = "Enable";
    Method.i_args = (arg1
                       (Some "enable", basic_boolean));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_GetAllDevices = {
    Method.interface = interface;
    Method.member = "GetAllDevices";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "devices", array basic_object_path));
    Method.annotations = [(OBus_introspect.csymbol, "impl_manager_get_all_devices")];
  }
  let m_GetDeviceByIpIface = {
    Method.interface = interface;
    Method.member = "GetDeviceByIpIface";
    Method.i_args = (arg1
                       (Some "iface", basic_string));
    Method.o_args = (arg1
                       (Some "device", basic_object_path));
    Method.annotations = [];
  }
  let m_GetDevices = {
    Method.interface = interface;
    Method.member = "GetDevices";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "devices", array basic_object_path));
    Method.annotations = [];
  }
  let m_GetLogging = {
    Method.interface = interface;
    Method.member = "GetLogging";
    Method.i_args = (arg0);
    Method.o_args = (arg2
                       (Some "level", basic_string)
                       (Some "domains", basic_string));
    Method.annotations = [];
  }
  let m_GetPermissions = {
    Method.interface = interface;
    Method.member = "GetPermissions";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "permissions", dict string basic_string));
    Method.annotations = [];
  }
  let m_Reload = {
    Method.interface = interface;
    Method.member = "Reload";
    Method.i_args = (arg1
                       (Some "flags", basic_uint32));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_SetLogging = {
    Method.interface = interface;
    Method.member = "SetLogging";
    Method.i_args = (arg2
                       (Some "level", basic_string)
                       (Some "domains", basic_string));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_Sleep = {
    Method.interface = interface;
    Method.member = "Sleep";
    Method.i_args = (arg1
                       (Some "sleep", basic_boolean));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_state = {
    Method.interface = interface;
    Method.member = "state";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "state", basic_uint32));
    Method.annotations = [];
  }
  let s_CheckPermissions = {
    Signal.interface = interface;
    Signal.member = "CheckPermissions";
    Signal.args = (arg0);
    Signal.annotations = [];
  }
  let s_DeviceAdded = {
    Signal.interface = interface;
    Signal.member = "DeviceAdded";
    Signal.args = (arg1
                       (Some "device_path", basic_object_path));
    Signal.annotations = [];
  }
  let s_DeviceRemoved = {
    Signal.interface = interface;
    Signal.member = "DeviceRemoved";
    Signal.args = (arg1
                       (Some "device_path", basic_object_path));
    Signal.annotations = [];
  }
  let s_PropertiesChanged = {
    Signal.interface = interface;
    Signal.member = "PropertiesChanged";
    Signal.args = (arg1
                       (Some "properties", dict string variant));
    Signal.annotations = [];
  }
  let s_StateChanged = {
    Signal.interface = interface;
    Signal.member = "StateChanged";
    Signal.args = (arg1
                       (Some "state", basic_uint32));
    Signal.annotations = [];
  }
  let p_ActivatingConnection = {
    Property.interface = interface;
    Property.member = "ActivatingConnection";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_ActiveConnections = {
    Property.interface = interface;
    Property.member = "ActiveConnections";
    Property.typ = array basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_AllDevices = {
    Property.interface = interface;
    Property.member = "AllDevices";
    Property.typ = array basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Capabilities = {
    Property.interface = interface;
    Property.member = "Capabilities";
    Property.typ = array basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Connectivity = {
    Property.interface = interface;
    Property.member = "Connectivity";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Devices = {
    Property.interface = interface;
    Property.member = "Devices";
    Property.typ = array basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_GlobalDnsConfiguration = {
    Property.interface = interface;
    Property.member = "GlobalDnsConfiguration";
    Property.typ = dict string variant;
    Property.access = Property.readable_writable;
    Property.annotations = [];
  }
  let p_Metered = {
    Property.interface = interface;
    Property.member = "Metered";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_NetworkingEnabled = {
    Property.interface = interface;
    Property.member = "NetworkingEnabled";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_PrimaryConnection = {
    Property.interface = interface;
    Property.member = "PrimaryConnection";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_PrimaryConnectionType = {
    Property.interface = interface;
    Property.member = "PrimaryConnectionType";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Startup = {
    Property.interface = interface;
    Property.member = "Startup";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_State = {
    Property.interface = interface;
    Property.member = "State";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Version = {
    Property.interface = interface;
    Property.member = "Version";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_WimaxEnabled = {
    Property.interface = interface;
    Property.member = "WimaxEnabled";
    Property.typ = basic_boolean;
    Property.access = Property.readable_writable;
    Property.annotations = [];
  }
  let p_WimaxHardwareEnabled = {
    Property.interface = interface;
    Property.member = "WimaxHardwareEnabled";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_WirelessEnabled = {
    Property.interface = interface;
    Property.member = "WirelessEnabled";
    Property.typ = basic_boolean;
    Property.access = Property.readable_writable;
    Property.annotations = [];
  }
  let p_WirelessHardwareEnabled = {
    Property.interface = interface;
    Property.member = "WirelessHardwareEnabled";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_WwanEnabled = {
    Property.interface = interface;
    Property.member = "WwanEnabled";
    Property.typ = basic_boolean;
    Property.access = Property.readable_writable;
    Property.annotations = [];
  }
  let p_WwanHardwareEnabled = {
    Property.interface = interface;
    Property.member = "WwanHardwareEnabled";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  type 'a members = {
    m_ActivateConnection : 'a OBus_object.t -> OBus_path.t * OBus_path.t * OBus_path.t -> OBus_path.t Lwt.t;
    m_AddAndActivateConnection : 'a OBus_object.t -> (string * (string * OBus_value.V.single) list) list * OBus_path.t * OBus_path.t -> (OBus_path.t * OBus_path.t) Lwt.t;
    m_CheckConnectivity : 'a OBus_object.t -> unit -> int32 Lwt.t;
    m_CheckpointCreate : 'a OBus_object.t -> OBus_path.t list * int32 * int32 -> OBus_path.t Lwt.t;
    m_CheckpointDestroy : 'a OBus_object.t -> OBus_path.t -> unit Lwt.t;
    m_CheckpointRollback : 'a OBus_object.t -> OBus_path.t -> (string * int32) list Lwt.t;
    m_DeactivateConnection : 'a OBus_object.t -> OBus_path.t -> unit Lwt.t;
    m_Enable : 'a OBus_object.t -> bool -> unit Lwt.t;
    m_GetAllDevices : 'a OBus_object.t -> unit -> OBus_path.t list Lwt.t;
    m_GetDeviceByIpIface : 'a OBus_object.t -> string -> OBus_path.t Lwt.t;
    m_GetDevices : 'a OBus_object.t -> unit -> OBus_path.t list Lwt.t;
    m_GetLogging : 'a OBus_object.t -> unit -> (string * string) Lwt.t;
    m_GetPermissions : 'a OBus_object.t -> unit -> (string * string) list Lwt.t;
    m_Reload : 'a OBus_object.t -> int32 -> unit Lwt.t;
    m_SetLogging : 'a OBus_object.t -> string * string -> unit Lwt.t;
    m_Sleep : 'a OBus_object.t -> bool -> unit Lwt.t;
    m_state : 'a OBus_object.t -> unit -> int32 Lwt.t;
    p_ActivatingConnection : 'a OBus_object.t -> OBus_path.t React.signal;
    p_ActiveConnections : 'a OBus_object.t -> OBus_path.t list React.signal;
    p_AllDevices : 'a OBus_object.t -> OBus_path.t list React.signal;
    p_Capabilities : 'a OBus_object.t -> int32 list React.signal;
    p_Connectivity : 'a OBus_object.t -> int32 React.signal;
    p_Devices : 'a OBus_object.t -> OBus_path.t list React.signal;
    p_GlobalDnsConfiguration : ('a OBus_object.t -> (string * OBus_value.V.single) list React.signal) * ('a OBus_object.t -> (string * OBus_value.V.single) list -> unit Lwt.t);
    p_Metered : 'a OBus_object.t -> int32 React.signal;
    p_NetworkingEnabled : 'a OBus_object.t -> bool React.signal;
    p_PrimaryConnection : 'a OBus_object.t -> OBus_path.t React.signal;
    p_PrimaryConnectionType : 'a OBus_object.t -> string React.signal;
    p_Startup : 'a OBus_object.t -> bool React.signal;
    p_State : 'a OBus_object.t -> int32 React.signal;
    p_Version : 'a OBus_object.t -> string React.signal;
    p_WimaxEnabled : ('a OBus_object.t -> bool React.signal) * ('a OBus_object.t -> bool -> unit Lwt.t);
    p_WimaxHardwareEnabled : 'a OBus_object.t -> bool React.signal;
    p_WirelessEnabled : ('a OBus_object.t -> bool React.signal) * ('a OBus_object.t -> bool -> unit Lwt.t);
    p_WirelessHardwareEnabled : 'a OBus_object.t -> bool React.signal;
    p_WwanEnabled : ('a OBus_object.t -> bool React.signal) * ('a OBus_object.t -> bool -> unit Lwt.t);
    p_WwanHardwareEnabled : 'a OBus_object.t -> bool React.signal;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
        method_info m_ActivateConnection members.m_ActivateConnection;
        method_info m_AddAndActivateConnection members.m_AddAndActivateConnection;
        method_info m_CheckConnectivity members.m_CheckConnectivity;
        method_info m_CheckpointCreate members.m_CheckpointCreate;
        method_info m_CheckpointDestroy members.m_CheckpointDestroy;
        method_info m_CheckpointRollback members.m_CheckpointRollback;
        method_info m_DeactivateConnection members.m_DeactivateConnection;
        method_info m_Enable members.m_Enable;
        method_info m_GetAllDevices members.m_GetAllDevices;
        method_info m_GetDeviceByIpIface members.m_GetDeviceByIpIface;
        method_info m_GetDevices members.m_GetDevices;
        method_info m_GetLogging members.m_GetLogging;
        method_info m_GetPermissions members.m_GetPermissions;
        method_info m_Reload members.m_Reload;
        method_info m_SetLogging members.m_SetLogging;
        method_info m_Sleep members.m_Sleep;
        method_info m_state members.m_state;
      |]
      [|
        signal_info s_CheckPermissions;
        signal_info s_DeviceAdded;
        signal_info s_DeviceRemoved;
        signal_info s_PropertiesChanged;
        signal_info s_StateChanged;
      |]
      [|
        property_r_info p_ActivatingConnection members.p_ActivatingConnection;
        property_r_info p_ActiveConnections members.p_ActiveConnections;
        property_r_info p_AllDevices members.p_AllDevices;
        property_r_info p_Capabilities members.p_Capabilities;
        property_r_info p_Connectivity members.p_Connectivity;
        property_r_info p_Devices members.p_Devices;
        property_rw_info p_GlobalDnsConfiguration (fst members.p_GlobalDnsConfiguration) (snd members.p_GlobalDnsConfiguration);
        property_r_info p_Metered members.p_Metered;
        property_r_info p_NetworkingEnabled members.p_NetworkingEnabled;
        property_r_info p_PrimaryConnection members.p_PrimaryConnection;
        property_r_info p_PrimaryConnectionType members.p_PrimaryConnectionType;
        property_r_info p_Startup members.p_Startup;
        property_r_info p_State members.p_State;
        property_r_info p_Version members.p_Version;
        property_rw_info p_WimaxEnabled (fst members.p_WimaxEnabled) (snd members.p_WimaxEnabled);
        property_r_info p_WimaxHardwareEnabled members.p_WimaxHardwareEnabled;
        property_rw_info p_WirelessEnabled (fst members.p_WirelessEnabled) (snd members.p_WirelessEnabled);
        property_r_info p_WirelessHardwareEnabled members.p_WirelessHardwareEnabled;
        property_rw_info p_WwanEnabled (fst members.p_WwanEnabled) (snd members.p_WwanEnabled);
        property_r_info p_WwanHardwareEnabled members.p_WwanHardwareEnabled;
      |]
end
