(* File auto-generated by obus-gen-interface, DO NOT EDIT. *)
open OBus_value
open OBus_value.C
open OBus_member
open OBus_object
module Org_freedesktop_NetworkManager_Connection_Active =
struct
  let interface = "org.freedesktop.NetworkManager.Connection.Active"
  let s_PropertiesChanged = {
    Signal.interface = interface;
    Signal.member = "PropertiesChanged";
    Signal.args = (arg1
                       (Some "properties", dict string variant));
    Signal.annotations = [];
  }
  let s_StateChanged = {
    Signal.interface = interface;
    Signal.member = "StateChanged";
    Signal.args = (arg2
                       (Some "state", basic_uint32)
                       (Some "reason", basic_uint32));
    Signal.annotations = [];
  }
  let p_Connection = {
    Property.interface = interface;
    Property.member = "Connection";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Default = {
    Property.interface = interface;
    Property.member = "Default";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Default6 = {
    Property.interface = interface;
    Property.member = "Default6";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Devices = {
    Property.interface = interface;
    Property.member = "Devices";
    Property.typ = array basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Dhcp4Config = {
    Property.interface = interface;
    Property.member = "Dhcp4Config";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Dhcp6Config = {
    Property.interface = interface;
    Property.member = "Dhcp6Config";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Id = {
    Property.interface = interface;
    Property.member = "Id";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Ip4Config = {
    Property.interface = interface;
    Property.member = "Ip4Config";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Ip6Config = {
    Property.interface = interface;
    Property.member = "Ip6Config";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Master = {
    Property.interface = interface;
    Property.member = "Master";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_SpecificObject = {
    Property.interface = interface;
    Property.member = "SpecificObject";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_State = {
    Property.interface = interface;
    Property.member = "State";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Type = {
    Property.interface = interface;
    Property.member = "Type";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Uuid = {
    Property.interface = interface;
    Property.member = "Uuid";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Vpn = {
    Property.interface = interface;
    Property.member = "Vpn";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  type 'a members = {
    p_Connection : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Default : 'a OBus_object.t -> bool React.signal;
    p_Default6 : 'a OBus_object.t -> bool React.signal;
    p_Devices : 'a OBus_object.t -> OBus_path.t list React.signal;
    p_Dhcp4Config : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Dhcp6Config : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Id : 'a OBus_object.t -> string React.signal;
    p_Ip4Config : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Ip6Config : 'a OBus_object.t -> OBus_path.t React.signal;
    p_Master : 'a OBus_object.t -> OBus_path.t React.signal;
    p_SpecificObject : 'a OBus_object.t -> OBus_path.t React.signal;
    p_State : 'a OBus_object.t -> int32 React.signal;
    p_Type : 'a OBus_object.t -> string React.signal;
    p_Uuid : 'a OBus_object.t -> string React.signal;
    p_Vpn : 'a OBus_object.t -> bool React.signal;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
      |]
      [|
        signal_info s_PropertiesChanged;
        signal_info s_StateChanged;
      |]
      [|
        property_r_info p_Connection members.p_Connection;
        property_r_info p_Default members.p_Default;
        property_r_info p_Default6 members.p_Default6;
        property_r_info p_Devices members.p_Devices;
        property_r_info p_Dhcp4Config members.p_Dhcp4Config;
        property_r_info p_Dhcp6Config members.p_Dhcp6Config;
        property_r_info p_Id members.p_Id;
        property_r_info p_Ip4Config members.p_Ip4Config;
        property_r_info p_Ip6Config members.p_Ip6Config;
        property_r_info p_Master members.p_Master;
        property_r_info p_SpecificObject members.p_SpecificObject;
        property_r_info p_State members.p_State;
        property_r_info p_Type members.p_Type;
        property_r_info p_Uuid members.p_Uuid;
        property_r_info p_Vpn members.p_Vpn;
      |]
end
